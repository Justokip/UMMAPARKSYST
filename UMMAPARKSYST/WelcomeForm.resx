<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panel1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2Q==
</value>
  </data>
</root>